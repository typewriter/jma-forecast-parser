class JmaForecastParser
  # Return
  # {
  #   :updated
  # {
  #   # 風 (パースしません)
  #   :wind => { :sentence => "東の風　後　南東の風" },
  #   # 天気
  #   :weather => {
  #     # 
  #     :sentence => "晴れ　昼過ぎ　から　時々　くもり　所により　夜のはじめ頃　雨",
  #     # 3時間ごとの分割結果
  #     :sentence_every_3_hours => {
  #       0 => "晴れ",
  #       3 => "晴れ",
  #       6 => "晴れ",
  #       9 => "晴れ",
  #       12 => "晴れ　時々　くもり",
  #       15 => "晴れ　時々　くもり",
  #       18 => "晴れ　時々　くもり　所により　雨",
  #       21 => "晴れ　時々　くもり"
  #     },
  #     # 3時間ごとの分割結果(詳細)
  #     :parsed_every_3_hours => {
  #       0
  #
  #     }
  #   },
  #   # 降水確率(%): [0-6時, 6-12時, 12-18時, 18-24時]
  #   :rainy => [30, 20, 10, 0],
  #   # 気温(度): [朝の最低気温, 日中の最高気温]
  #   :temp => [20, 25]
  # }
  def self.parse_from_sentence(sentence)

  end

  def self.parse_from_yoho_html(yoho_html)

  end

end

class OldJmaForecastParser
  # ref. https://www.jma.go.jp/jma/kishou/know/yougo_hp/mokuji.html
  TIMING = /未明|明け方|朝|昼前|昼過ぎ|夕方|夜のはじめ頃|夜|夜遅く|から|まで|朝晩/
  FREQUENCY = /時々|一時|後/
  AREAS = /宗谷北部|宗谷南部|利尻・礼文|上川北部|上川中部|上川南部|留萌北部|留萌中部|留萌南部|網走東部|網走西部|網走南部|北見地方|紋別北部|紋別南部|釧路北部|釧路中部|釧路南東部|釧路南西部|根室北部|根室中部|根室南部|十勝北部|十勝中部|十勝南部|胆振西部|胆振中部|胆振東部|日高西部|日高中部|日高東部|石狩北部|石狩中部|石狩南部|北空知|中空知|南空知|後志北部|羊蹄山麓|後志西部|渡島北部|渡島東部|渡島西部|檜山北部|檜山南部|檜山奥尻島|東青津軽|北五津軽|西津軽|中南津軽|下北|三八|上北|二戸地域|盛岡地域|花北地域|遠野地域|奥州金ケ崎地域|両磐地域|久慈地域|宮古地域|釜石地域|大船渡地域|気仙沼地域|石巻地域|登米・東部栗原|東部大崎|東部仙台|東部仙南|西部栗原|西部大崎|西部仙台|西部仙南|能代山本地域|秋田中央地域|本荘由©地域|北秋鹿角地域|仙北平鹿地域|湯沢雄勝地域|北村山|西村山|東南村山|東南置賜|西置賜|庄内北部|庄内南部|最上|中通り北部|中通り中部|中通り南部|浜通り北部|浜通り中部|浜通り南部|会津北部|会津中部|会津南部|県北地域|県央地域|鹿行地域|県南地域|県西地域|那須地域|日光地域|南東部|県央部|南西部|利根・沼田地域|吾妻地域|前橋・桐生地域|伊勢崎・太田地域|高崎・藤岡地域|南東部|南中部|南西部|北東部|北西部|秩父地方|香取・海匝|山武・長生|印旛|東葛飾|千葉中央|君津|夷隅・安房|23区東部|23区西部|多摩北部|多摩西部|多摩南部|大島|新島|三宅島|八丈島|小笠原諸島|横浜・川崎|湘南|三浦半島|相模原|県央|足柄上|西湘|上越市|糸魚川市|妙高市|三条地域|魚沼市|長岡地域|柏崎地域|南魚沼地域|十日町地域|岩船地域|新発田地域|新潟地域|五泉地域|佐渡|東部北|東部南|西部北|西部南|能登北部|能登南部|加賀北部|加賀南部|奥越|嶺北北部|嶺北南部|嶺南東部|嶺南西部|東部|富士五湖|中北地域|峡東地域|峡南地域|中野飯山地域|長野地域|大北地域|上田地域|佐久地域|松本地域|乗鞍上高地地域|諏訪地域|上伊那地域|木曽地域|下伊那地域|飛騨北部|飛騨南部|岐阜・西濃|中濃|東濃|伊豆北|伊豆南|富士山南東|富士山南西|中部北|中部南|遠州北|遠州南|東三河北部|東三河南部|西三河北東部|西三河北西部|西三河南部|尾張東部|尾張西部|知多地域|北部|中部|伊賀|伊勢志摩|紀勢・東紀州|湖北|湖東|近江西部|東近江|近江南部|甲賀|丹後|舞鶴・綾部|福知山|南丹・京丹波|京都・亀岡|山城中部|山城南部|北大阪|東部大阪|大阪市|南河内|泉州|但馬北部|但馬南部|北播丹波|播磨北西部|阪神|播磨南東部|播磨南西部|淡路島|北東部|北西部|五條・北部吉野|南東部|南西部|紀北|紀中|新宮・東牟婁|田辺・西牟婁|鳥取地区|八頭地区|倉吉地区|米子地区|日野地区|松江地区|出雲地区|雲南地区|大田邑智地区|浜田地区|益田地区|隠岐|勝英地域|津山地域|真庭地域|新見地域|東備地域|岡山地域|高梁地域|倉敷地域|井笠地域|備北|芸北|福山・尾三|東広島・竹原|広島・呉|萩・美祢|長門|岩国|柳井・光|周南・下松|山口・防府|下関|宇部・山陽小野田|徳島・鳴門|美馬北部・阿北|美馬南部・神山|三好|阿南|那賀・勝浦|海部|小豆|東讃|高松地域|中讃|西讃|東予東部|東予西部|中予|南予北部|南予南部|室戸|安芸|高知中央|嶺北|高吾北|高幡|幡多|福岡地方|北九州・遠賀地区|京築|筑豊地方|筑後北部|筑後南部|唐津地区|伊万里地区|鳥栖地区|佐賀多久地区|武雄地区|鹿島地区|平戸・松浦地区|佐世保・東彼地区|島原半島|諫早・大村地区|長崎地区|西彼杵半島|上対馬|下対馬|壱岐|上五島|下五島|山鹿菊池|荒尾玉名|熊本市|上益城|宇城八代|阿蘇地方|天草地方|芦北地方|球磨地方|北部|中部|佐伯市|豊後大野市|日田玖珠|竹田市|延岡・日向地区|西都・高鍋地区|高千穂地区|椎葉・美郷地区|宮崎地区|日南・串間地区|小林・えびの地区|都城地区|出水・伊佐|川薩・姶良|甑島|鹿児島・日置|指宿・川辺|曽於|肝属|種子島地方|屋久島地方|十島村|北部|南部|伊是名・伊平屋|国頭地区|名護地区|恩納・金武地区|中部|南部|慶良間・粟国諸島|久米島|大東島地方|宮古島|多良間島|石垣市|竹富町|与那国島地方/
  STOP_WORDS = /#{TIMING}|所により|#{AREAS}|では/

  def self.parse(forecast)
    if forecast =~ /(?:(.+(?:風|強く))[ 　])?(.+)/
      return { wind: $1, weather: parse_weather($2) }
    end
    nil
  end

  def self.parse_timing(timing)
    timing_map = { '未明' => 0, '明け方' => 3, '朝' => 6, '昼前' => 9,
                   '昼過ぎ' => 12, '夕方' => 15, '夜のはじめ頃' => 18, '夜遅く' => 21,
                   '夜' => [18,21], '朝晩' => [0,3,6,18,21], '朝夕' => [0,3,6,15] }

    if timing == ''
      return (0..21).step(3).to_a
    elsif timing =~ /(.+)から(.+)/
      from = timing_map[$1]
      to   = timing_map[$2]
      return (from..to).step(3).to_a
    elsif timing =~ /(.+)から/
      from = timing_map[$1]
      return (from..21).step(3).to_a
    elsif timing =~ /(.+)まで/
      to   = timing_map[$1]
      return (0..to).step(3).to_a
    else
      return [timing_map[timing]].flatten
    end
  end

  def self.parse_weather(weather)
    forecasts = [(0..21).step(3).to_a, Array.new(8).map{''}].transpose.to_h
    # => {0=>"", 3=>"", 6=>"", 9=>"", 12=>"", 15=>"", 18=>"", 21=>""}

    items = weather.split(/[ 　]/)

    weather = ''
    timing  = ''

    items.each_with_index { |e, i|
      if e =~ TIMING
        timing += e
      else
        weather += e
      end

      if e !~ STOP_WORDS && (!items[i+1] || items[i+1] =~ STOP_WORDS)
        if timing == '' && weather !~ /所により|#{AREAS}/
          forecasts = forecasts.map { |k,v| [k, weather] }.to_h
        else
          timings = parse_timing(timing)
          timings.each { |t|
            if weather =~ /所により|#{FREQUENCY}|#{AREAS}/
              forecasts[t] += weather
            else
              forecasts[t] = weather
            end
          }
        end
        weather = ''
        timing  = ''
      end
    }

    forecasts
  end
end
